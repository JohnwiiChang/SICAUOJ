//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace JudgeService.TaskRequestServ {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskRequestServ.ITaskPool")]
    public interface ITaskPool {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/GetTask", ReplyAction="http://tempuri.org/ITaskPool/GetTaskResponse")]
        System.Collections.Generic.Dictionary<string, string> GetTask(string host, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/GetTask", ReplyAction="http://tempuri.org/ITaskPool/GetTaskResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetTaskAsync(string host, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/GetTaskRun", ReplyAction="http://tempuri.org/ITaskPool/GetTaskRunResponse")]
        System.Collections.Generic.Dictionary<string, string> GetTaskRun(string host, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/GetTaskRun", ReplyAction="http://tempuri.org/ITaskPool/GetTaskRunResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetTaskRunAsync(string host, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/updateTaskRunningResult", ReplyAction="http://tempuri.org/ITaskPool/updateTaskRunningResultResponse")]
        void updateTaskRunningResult(int Id, string Reply, double Runtime, long Mem, string Status, bool isPass, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/updateTaskRunningResult", ReplyAction="http://tempuri.org/ITaskPool/updateTaskRunningResultResponse")]
        System.Threading.Tasks.Task updateTaskRunningResultAsync(int Id, string Reply, double Runtime, long Mem, string Status, bool isPass, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/updateTaskCompilingResult", ReplyAction="http://tempuri.org/ITaskPool/updateTaskCompilingResultResponse")]
        void updateTaskCompilingResult(int Id, string Status, double CompileTime, string Reply, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/updateTaskCompilingResult", ReplyAction="http://tempuri.org/ITaskPool/updateTaskCompilingResultResponse")]
        System.Threading.Tasks.Task updateTaskCompilingResultAsync(int Id, string Status, double CompileTime, string Reply, int tasks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/IamOnline", ReplyAction="http://tempuri.org/ITaskPool/IamOnlineResponse")]
        System.Collections.Generic.Dictionary<string, string> IamOnline(string Id, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskPool/IamOnline", ReplyAction="http://tempuri.org/ITaskPool/IamOnlineResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> IamOnlineAsync(string Id, string type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskPoolChannel : JudgeService.TaskRequestServ.ITaskPool, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskPoolClient : System.ServiceModel.ClientBase<JudgeService.TaskRequestServ.ITaskPool>, JudgeService.TaskRequestServ.ITaskPool {
        
        public TaskPoolClient() {
        }
        
        public TaskPoolClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskPoolClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskPoolClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskPoolClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetTask(string host, int tasks) {
            return base.Channel.GetTask(host, tasks);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetTaskAsync(string host, int tasks) {
            return base.Channel.GetTaskAsync(host, tasks);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetTaskRun(string host, int tasks) {
            return base.Channel.GetTaskRun(host, tasks);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetTaskRunAsync(string host, int tasks) {
            return base.Channel.GetTaskRunAsync(host, tasks);
        }
        
        public void updateTaskRunningResult(int Id, string Reply, double Runtime, long Mem, string Status, bool isPass, int tasks) {
            base.Channel.updateTaskRunningResult(Id, Reply, Runtime, Mem, Status, isPass, tasks);
        }
        
        public System.Threading.Tasks.Task updateTaskRunningResultAsync(int Id, string Reply, double Runtime, long Mem, string Status, bool isPass, int tasks) {
            return base.Channel.updateTaskRunningResultAsync(Id, Reply, Runtime, Mem, Status, isPass, tasks);
        }
        
        public void updateTaskCompilingResult(int Id, string Status, double CompileTime, string Reply, int tasks) {
            base.Channel.updateTaskCompilingResult(Id, Status, CompileTime, Reply, tasks);
        }
        
        public System.Threading.Tasks.Task updateTaskCompilingResultAsync(int Id, string Status, double CompileTime, string Reply, int tasks) {
            return base.Channel.updateTaskCompilingResultAsync(Id, Status, CompileTime, Reply, tasks);
        }
        
        public System.Collections.Generic.Dictionary<string, string> IamOnline(string Id, string type) {
            return base.Channel.IamOnline(Id, type);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> IamOnlineAsync(string Id, string type) {
            return base.Channel.IamOnlineAsync(Id, type);
        }
    }
}
